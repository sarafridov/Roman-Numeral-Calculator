var _user$project$Main$parse1 = F2(
	function (lut, dec) {
		parse1:
		while (true) {
			var _p0 = lut;
			if (_p0.ctor === '::') {
				var _p1 = _p0._0._0;
				if (_elm_lang$core$Native_Utils.cmp(_p1, dec) < 1) {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_p0._0._1,
						A2(_user$project$Main$parse1, lut, dec - _p1));
				} else {
					var _v1 = _p0._1,
						_v2 = dec;
					lut = _v1;
					dec = _v2;
					continue parse1;
				}
			} else {
				return '';
			}
		}
	});
var _user$project$Main$parseI = F2(
	function (roman, lut) {
		parseI:
		while (true) {
			var _p2 = lut;
			if (_p2.ctor === '::') {
				var _p4 = _p2._0._1;
				if (A2(_elm_lang$core$String$startsWith, _p4, roman)) {
					var _p3 = A2(
						_user$project$Main$parseI,
						A2(
							_elm_lang$core$String$dropLeft,
							_elm_lang$core$String$length(_p4),
							roman),
						lut);
					var number = _p3._0;
					var error = _p3._1;
					return {ctor: '_Tuple2', _0: _p2._0._0 + number, _1: error};
				} else {
					var _v4 = roman,
						_v5 = _p2._1;
					roman = _v4;
					lut = _v5;
					continue parseI;
				}
			} else {
				var _p5 = roman;
				if (_p5 === '') {
					return {ctor: '_Tuple2', _0: 0, _1: ''};
				} else {
					return {ctor: '_Tuple2', _0: 0, _1: 'Invalid Roman numeral'};
				}
			}
		}
	});
var _user$project$Main$compute = F3(
	function (reg1, reg2, op) {
		var _p6 = op;
		switch (_p6.ctor) {
			case 'NoOp':
				return 0;
			case 'Add':
				return reg1 + reg2;
			case 'Subtract':
				return reg1 - reg2;
			case 'Multiply':
				return reg1 * reg2;
			default:
				return (reg1 / reg2) | 0;
		}
	});
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p7 = msg;
		switch (_p7.ctor) {
			case 'Input1':
				var upperReg1 = _elm_lang$core$String$toUpper(_p7._0);
				var _p8 = A2(_user$project$Main$parseI, upperReg1, model.lut);
				var int1 = _p8._0;
				var error = _p8._1;
				return _elm_lang$core$Native_Utils.update(
					model,
					{reg1: upperReg1, int1: int1, syntaxError1: error});
			case 'Input2':
				var upperReg2 = _elm_lang$core$String$toUpper(_p7._0);
				var _p9 = A2(_user$project$Main$parseI, upperReg2, model.lut);
				var int2 = _p9._0;
				var error = _p9._1;
				return _elm_lang$core$Native_Utils.update(
					model,
					{reg2: upperReg2, int2: int2, syntaxError2: error});
			case 'Operator':
				return _elm_lang$core$Native_Utils.update(
					model,
					{operator: _p7._0});
			default:
				var result = A3(_user$project$Main$compute, model.int1, model.int2, model.operator);
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						result1: result,
						resultI: A2(_user$project$Main$parse1, model.lut, result)
					});
		}
	});
var _user$project$Main$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {reg1: a, reg2: b, int1: c, int2: d, operator: e, resultI: f, result1: g, syntaxError1: h, syntaxError2: i, lut: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Main$Divide = {ctor: 'Divide'};
var _user$project$Main$Multiply = {ctor: 'Multiply'};
var _user$project$Main$Subtract = {ctor: 'Subtract'};
var _user$project$Main$Add = {ctor: 'Add'};
var _user$project$Main$NoOp = {ctor: 'NoOp'};
var _user$project$Main$init = {
	reg1: '',
	reg2: '',
	int1: 0,
	int2: 0,
	operator: _user$project$Main$NoOp,
	resultI: '',
	result1: 0,
	syntaxError1: '',
	syntaxError2: '',
	lut: _elm_lang$core$Native_List.fromArray(
		[
			{ctor: '_Tuple2', _0: 1000, _1: 'M'},
			{ctor: '_Tuple2', _0: 900, _1: 'CM'},
			{ctor: '_Tuple2', _0: 500, _1: 'D'},
			{ctor: '_Tuple2', _0: 400, _1: 'CD'},
			{ctor: '_Tuple2', _0: 100, _1: 'C'},
			{ctor: '_Tuple2', _0: 90, _1: 'XC'},
			{ctor: '_Tuple2', _0: 50, _1: 'L'},
			{ctor: '_Tuple2', _0: 40, _1: 'XL'},
			{ctor: '_Tuple2', _0: 10, _1: 'X'},
			{ctor: '_Tuple2', _0: 9, _1: 'IX'},
			{ctor: '_Tuple2', _0: 5, _1: 'V'},
			{ctor: '_Tuple2', _0: 4, _1: 'IV'},
			{ctor: '_Tuple2', _0: 1, _1: 'I'}
		])
};
var _user$project$Main$Compute = {ctor: 'Compute'};
var _user$project$Main$Operator = function (a) {
	return {ctor: 'Operator', _0: a};
};
var _user$project$Main$Input2 = function (a) {
	return {ctor: 'Input2', _0: a};
};
var _user$project$Main$Input1 = function (a) {
	return {ctor: 'Input1', _0: a};
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(model.syntaxError1)
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(model.syntaxError2)
					])),
				A2(
				_elm_lang$html$Html$input,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$type$('text'),
						_elm_lang$html$Html_Attributes$placeholder('Reg1'),
						_elm_lang$html$Html_Events$onInput(_user$project$Main$Input1)
					]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				A2(
				_elm_lang$html$Html$input,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$type$('text'),
						_elm_lang$html$Html_Attributes$placeholder('Reg2'),
						_elm_lang$html$Html_Events$onInput(_user$project$Main$Input2)
					]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(
						_user$project$Main$Operator(_user$project$Main$Add))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('+')
					])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(
						_user$project$Main$Operator(_user$project$Main$Subtract))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('-')
					])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(
						_user$project$Main$Operator(_user$project$Main$Multiply))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('*')
					])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(
						_user$project$Main$Operator(_user$project$Main$Divide))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('/')
					])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(_user$project$Main$Compute)
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('=')
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Operand 1: ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								A2(_user$project$Main$parse1, model.lut, model.int1),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' ',
									_elm_lang$core$Basics$toString(model.int1)))))
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Operand 2: ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								A2(_user$project$Main$parse1, model.lut, model.int2),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' ',
									_elm_lang$core$Basics$toString(model.int2)))))
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Operator: ',
							_elm_lang$core$Basics$toString(model.operator)))
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Result: ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								model.resultI,
								A2(
									_elm_lang$core$Basics_ops['++'],
									' ',
									_elm_lang$core$Basics$toString(model.result1)))))
					]))
			]));
};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$beginnerProgram(
		{model: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update})
};
